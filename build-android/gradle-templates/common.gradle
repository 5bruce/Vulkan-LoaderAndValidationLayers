apply plugin: 'com.android.model.native'
apply plugin: 'com.android.model.application'

// To detect host operating system
import org.apache.tools.ant.taskdefs.condition.Os

Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())
def ndkDir = properties.getProperty('ndk.dir')

def projectRoot = "../../../../.."  // This is top level of repo

model {

    repositories {
        libs(PrebuiltLibraries) {
            spirv-tools {
                //headers.srcDir '${projectRoot}/external/spirv-tools/include'
                headers.srcDir '/home/buildbot/Vulkan-LoaderAndValidationLayers/external/spirv-tools/include'
                binaries.withType(StaticLibraryBinary) {
                    //staticLibraryFile = file("${projectRoot}/external/shaderc/android_test/obj/local/${targetPlatform.getName()}/libSPIRV-Tools.a")
                    staticLibraryFile = file("/home/buildbot/Vulkan-LoaderAndValidationLayers/external/shaderc/android_test/obj/local/${targetPlatform.getName()}/libSPIRV-Tools.a")
                }
            }
        }
    }


    android {
        compileSdkVersion = 23
        buildToolsVersion = "23.0.3"

        defaultConfig.with {
            minSdkVersion.apiLevel = 22
            targetSdkVersion.apiLevel = 24
            versionCode = 1
            versionName = "1.0"
        }
    }

    android.ndk {
        moduleName = "VkLayer_${project.name}"

        // This is a workaround for clang problems on Windows
        // http://llvm.org/bugs/show_bug.cgi?id=27396
        if (Os.isFamily(Os.FAMILY_WINDOWS)) {
            toolchain = "gcc"
        } else {
            toolchain = "clang"
            cppFlags.addAll(["-Werror"])
        }

        stl = "gnustl_static"
        ldLibs.addAll(["log", "android"])
        cppFlags.addAll(["-std=c++11", "-DVK_PROTOTYPES", "-Wall",
                         "-Wno-unused-function", "-Wno-unused-const-variable",
                         "-DVK_USE_PLATFORM_ANDROID_KHR"])
        cppFlags.addAll(["-I${file("../../../../layers")}".toString(),
                         "-I${file("../../../../include")}".toString(),
                         "-I${file("../../../../loader")}".toString(),
                         "-I${file("../../include")}".toString(),
                         "-I${file("../../../../external/glslang")}".toString(),
                         "-I${file("../../../../external/spirv-tools/include")}".toString()])
    }

    // Turn on hard float support in armeabi-v7a
    android.abis {
        create("armeabi-v7a") {
            cppFlags.addAll(["-mhard-float", "-D_NDK_MATH_NO_SOFTFP=1", "-mfloat-abi=hard"])
            ldLibs.add("m_hard")
            ldFlags.add("-Wl,--no-warn-mismatch")
        }
    }

    android.sources {
        main {
            jni {
                dependencies {
                    library 'spirv-tools' linkage 'static'
                }
                source {
                    srcDir "../../layer-src/${project.name}"
                    srcDir '../../common'

                }
            }
        }
    }

    android.buildTypes {
        release {
            ndk.with {
                debuggable = true
            }
            minifyEnabled = false
        }
    }
    android.productFlavors {
        create ("all") {
            ndk.abiFilters.addAll(["armeabi-v7a", 'arm64-v8a',
                                   'x86', 'x86_64'])
        }
    }
}

