/* Copyright (c) 2015-2016 The Khronos Group Inc.
 * Copyright (C) 2015-2016 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Author: Tobin Ehlis <tobine@google.com>
 */
#ifndef VALIDATION_ERRORS_H_
#define VALIDATION_ERRORS_H_

// This will be an enum with a unique value for every individual validation error (and info/warn)
//  It will be code-generated by parsing the spec files and generate a unique_id for each code
//  Once initial list is generated, ids should never change for existing checks, just need to increment
//  id for new checks and also figure out how to handle checks that slightly change
// TODO : Generate this enum from the spec files
// Questions:
// 1. If an error message changes even a little bit in the spec, do we want new error code?
// 2. Should we distinguish between valid usage errors and other?
// 3. Do we want to generate comments after each?
// 4. Best name for struct and each enum value?
// 5. Do we want to contain INFO/[PERF_]WARN values in the same enum? If so need to rename.
// 6. Do we want to generate this file on every build or just have it checked in and have a separate flow for updating this file?
enum UNIQUE_VALIDATION_ERROR_CODE {
    VALIDATION_ERROR_1538 =
        1538, // Include some details in comment about where code is generated from such as "generated from vk.xml line 1538"
};
#define USE_ARRAY_VERSION 0
#if USE_ARRAY_VERSION
// The error struct encapsulates the code and a unique message related to that code that ties back to the spec section where the
//  code originated from. When an error is hit in validation, it then prints a custom message and appends this message to the end
//  of the custom message to provide further details on where to reference spec.
// Questions:
// 1. Anything else we want in this struct?
struct VALIDATION_ERROR_STRUCT {
    UNIQUE_VALIDATION_ERROR_CODE code;
    char const *const message;
};

// This array brings everything together and is what the layers actually reference when reporting errors
// Questions:
// 1. Array requires index value at point that data is used, this could be error-prone, is map preferred?
static VALIDATION_ERROR_STRUCT validation_errors[] = {
    // Index 0:
    {VALIDATION_ERROR_1538, "For more information refer to Vulkan Spec Section 7.4 Render Pass Commands which states "
                            "\"clearValueCount must be greater than the largest attachment index in renderPass that specifies a "
                            "loadOp (or stencilLoadOp, if the attachment has a depth/stencil format) of "
                            "VK_ATTACHMENT_LOAD_OP_CLEAR\" "
                            "(https://www.khronos.org/registry/vulkan/specs/1.0/xhtml/vkspec.html#vkCmdBeginRenderPass)."}
    // Index 1:
    // Next struct would be defined here
};
#else
// Alternate version of above using a map. This removes the need for the struct altogether if struct only contains string
std::unordered_map<int, char const *const> validation_error_map{
    {VALIDATION_ERROR_1538, "For more information refer to Vulkan Spec Section 7.4 Render Pass Commands which states "
                            "\"clearValueCount must be greater than the largest attachment index in renderPass that specifies a "
                            "loadOp (or stencilLoadOp, if the attachment has a depth/stencil format) of "
                            "VK_ATTACHMENT_LOAD_OP_CLEAR\" "
                            "(https://www.khronos.org/registry/vulkan/specs/1.0/xhtml/vkspec.html#vkCmdBeginRenderPass)."}};
#endif
#endif // VALIDATION_ERRORS_H_